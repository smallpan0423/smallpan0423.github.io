name: Build file update times

on:
  push:
    branches: [ main ]
    paths:
      - 'downloads/**'
      - 'docs/downloads/**'
      - '.github/workflows/build-manifest.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # 取完整歷史，比較不會在 git log 爆掉

      - name: Generate downloads.json (root & docs, PDF only)
        run: |
          set -e
          python3 - <<'PY'
          import os, json, sys
          from pathlib import Path
          from datetime import datetime, timezone
          import subprocess, shlex

          root = Path('.').resolve()

          # 取 owner：先 GH_OWNER，否則從 GITHUB_REPOSITORY 解析
          owner = os.getenv('GH_OWNER')
          if not owner:
            repo_full = os.getenv('GITHUB_REPOSITORY','')
            owner = repo_full.split('/')[0] if '/' in repo_full else ''
          if not owner:
            owner = 'username'  # safety fallback，不會讓腳本掛

          # 兩個來源：repo 根的 downloads/ 與 docs/downloads/
          bases = [root/'downloads', root/'docs'/'downloads']

          def safe_git_log(repo_rel: str) -> str:
            """取最後一次 commit 時間；失敗則回檔案 mtime"""
            try:
              r = subprocess.run(
                ['git','log','-1','--format=%cI','--', repo_rel],
                capture_output=True, text=True, check=False
              )
              iso = (r.stdout or '').strip()
              if iso:
                return iso
            except Exception:
              pass
            p = Path(repo_rel)
            ts = p.stat().st_mtime
            return datetime.fromtimestamp(ts, tz=timezone.utc).isoformat()

          items = []
          for base in bases:
            if not base.exists():
              continue
            for p in base.rglob('*'):
              if not p.is_file():
                continue
              # 只收 PDF、略過隱藏檔
              if p.name.startswith('.') or p.suffix.lower() != '.pdf':
                continue

              repo_rel = p.relative_to(root).as_posix()
              # 網站路徑：若是 docs 站檔，去掉前綴 'docs/'
              web_path = repo_rel[5:] if repo_rel.startswith('docs/') else repo_rel

              # 分類：downloads/ 之後的第一層（沒有就 misc）
              parts = web_path.split('/')
              folder = 'misc'
              if len(parts) >= 3 and parts[0] == 'downloads':
                folder = parts[1]

              updated = safe_git_log(repo_rel)
              size = p.stat().st_size

              items.append({
                'path': web_path,
                'name': p.name,
                'folder': folder,
                'size': size,
                'updated': updated,
                'url': f'https://{owner}.github.io/{web_path}'.replace(' ', '%20')
              })

          # 依更新時間新到舊
          items.sort(key=lambda x: x['updated'], reverse=True)

          # 同時輸出到 root 與 docs/，兩邊各放一份
          out_root = root / 'downloads.json'
          out_docs = root / 'docs' / 'downloads.json'
          out_docs.parent.mkdir(parents=True, exist_ok=True)

          for out in (out_root, out_docs):
            with open(out, 'w', encoding='utf-8') as f:
              json.dump(items, f, ensure_ascii=False, indent=2)
            print(f'[OK] Wrote {out} with {len(items)} items')

          # 再把內容印出來，方便你在 log 直接看到
          print('----- downloads.json -----')
          print((out_root).read_text(encoding='utf-8'))
          print('--------------------------')
          PY
        env:
          GH_OWNER: ${{ github.repository_owner }}

      - name: Commit manifest if changed
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add downloads.json docs/downloads.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: refresh downloads.json"
            git push
          fi
