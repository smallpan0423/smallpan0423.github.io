name: Build downloads manifest

on:
  push:
    branches: [ main ]
    paths:
      - 'downloads/**'
      - 'docs/downloads/**'
      - '.github/workflows/build-manifest.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate downloads.json (root & docs)
        run: |
          python3 - <<'PY'
          import os, json, sys
          from pathlib import Path
          from datetime import datetime, timezone
          import subprocess

          owner = os.environ.get('GITHUB_REPOSITORY_OWNER','')
          root = Path('.').resolve()

          # 兩個來源資料夾：repo 根的 downloads/、及 docs/downloads/
          bases = []
          for p in [root/'downloads', root/'docs'/'downloads']:
            if p.is_dir():
              bases.append(p)

          def last_commit_iso(repo_path:str)->str:
            """拿最後一次 commit 時間；失敗就回檔案修改時間"""
            try:
              r = subprocess.run(
                ['git','log','-1','--format=%cI','--', repo_path],
                capture_output=True, text=True, check=False
              )
              iso = (r.stdout or '').strip()
              if iso:
                return iso
            except Exception:
              pass
            # fallback：檔案 mtime（UTC ISO8601）
            ts = Path(repo_path).stat().st_mtime
            return datetime.fromtimestamp(ts, tz=timezone.utc).isoformat()

          items = []
          for base in bases:
            for p in base.rglob('*'):
              if not p.is_file():
                continue
              # 網站上的路徑：docs 站台要把 'docs/' 去掉
              repo_rel = p.relative_to(root).as_posix()
              if repo_rel.startswith('docs/'):
                web_path = repo_rel[len('docs/'):]
              else:
                web_path = repo_rel

              # 分類：downloads/ 底下第一層資料夾
              parts = web_path.split('/')
              folder = 'misc'
              if len(parts)>=2 and parts[0]=='downloads':
                folder = parts[1]

              # 取時間與大小
              updated = last_commit_iso(repo_rel)
              size = p.stat().st_size

              items.append({
                'path': web_path,
                'name': p.name,
                'folder': folder,
                'size': size,
                'updated': updated,
                'url': f'https://{owner}.github.io/{web_path}'.replace(' ', '%20')
              })

          # 依更新時間新到舊
          items.sort(key=lambda x: x['updated'], reverse=True)

          # 同時產生兩份（root 與 docs）
          out_root = root / 'downloads.json'
          out_docs = root / 'docs' / 'downloads.json'
          out_docs.parent.mkdir(parents=True, exist_ok=True)

          for out in [out_root, out_docs]:
            with open(out, 'w', encoding='utf-8') as f:
              json.dump(items, f, ensure_ascii=False, indent=2)
            print(f'Wrote {out} with {len(items)} items')

          PY

      - name: Commit manifest if changed
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add downloads.json docs/downloads.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: refresh downloads.json"
            git push
          fi
